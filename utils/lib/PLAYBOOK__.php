<?php


class PLAYBOOK__
{
    function __construct( $argc )
    {

###############################################################################
//PLAYBOOK
###############################################################################
//example of an JSON file syntax
        $JSONarray =
            '{
    "in": "/Users/swaschkut/Downloads/ASA-Config-initial-10_0-fw.xml",
    "out": "final.xml",
    "stagename": "staging/visibility-",
    "header-comment": "*****************************************************************************************************************************************************\n*                                                                                                                                                   *\n*  This script makes all of the required changes to add \'Visibility\' to your PAN-OS XML configuration file.                                         *\n*             (To achieve ‘Visibility’ the script can be used \'as is\' without any changes).                                                         *\n*                                                                                                                                                   *\n*  This script will need you to only do the following two things;                                                                                   *\n*    i) Rename the input file referenced in the first pan-os-php command below to be the XML configuration file being used (eg: example_panos.xml). *\n*    ii) Copy the input file from the above (ie: example_panos.xml) to the pan-os-php staging directory so that it can be referenced by this script.*\n*                                                                                                                                                   *\n*****************************************************************************************************************************************************\n\n*****************************************************************************************************************************************************\n*                                                                                                                                                   *\n*  The script will now begin and will run a sequence of pan-os-php commands.                                                                        *\n*  Each new command will use the outputfile of the previous command as the input file of the new command.                                           *\n*  The final xml file generated by the last command in this script should then be imported, and then loaded into the PAN-OS firewall.               *\n*                                                                                                                                                   *\n*****************************************************************************************************************************************************",
    "footer-comment": "*****************************************************************************************************************************************************\n*                                                                                                                                                   *\n*   VISIBILITY playbook FINALISED                                                                                                                   *\n*                                                                                                                                                   *\n*****************************************************************************************************************************************************",
    "command": [
    {
        "type": "ironskillet-update",
        "comment": "*****************************************************************************************************************\n*                                                                                                               *\n*  The first pan-os-php command (below) will download snippets to the pan-os-php folder from github.            *\n*  This ensures the latest snippets from https://github.com/PaloAltoNetworks/iron-skillet will be used below.   *\n*                                                                                                               *\n*****************************************************************************************************************"
    },
    {
        "type": "device",
        "actions": "actions=logforwardingprofile-create-bp:true",
        "comment": "*****************************************************************************************************************\n*                                                                                                               *\n*  The next pan-os-php command (below) will create the Best Practice Log Forwarding Profile called \'default\'.   *\n*  This config is sourced from the relevant snippet on https://github.com/PaloAltoNetworks/iron-skillet.        *\n*                                                                                                               *\n*****************************************************************************************************************"
    },
    {
        "type": "device",
        "actions": "actions=securityprofile-create-alert-only:true",
        "comment": "*****************************************************************************************************************\n*                                                                                                               *\n*  The next pan-os-php command (below) will create the Best Practice Security Profiles called \'Alert-Only-XX\'.  *\n*  (ie; \'Alert-Only-AS\',\' Alert-Only-AV\',\'Alert-Only-FB\',\'Alert-Only-URL\',\'Alert-Only-VP\',\'Alert-Only-WF\')      *\n*                                                                                                               *\n*  This command will also create the Best Practice Security Profile Group called \'Alert-Only\'.                  *\n*  This config is sourced from the relevant snippets on https://github.com/PaloAltoNetworks/iron-skillet.       *\n*                                                                                                               *\n*****************************************************************************************************************"
    },
    {
        "type": "device",
        "actions": "actions=zoneprotectionprofile-create-bp",
        "comment": "*****************************************************************************************************************\n*                                                                                                               *\n*  The next pan-os-php command (below) will create the Best Practice Zone Protection Profile called             *\n*  \'Recommended_Zone_Protection’.                                                                               *\n*  This config is sourced from the relevant snippet on https://github.com/PaloAltoNetworks/iron-skillet.        *\n*                                                                                                               *\n*****************************************************************************************************************"
    },
    {
        "type": "zone",
        "actions": "actions=zpp-Set:Recommended_Zone_Protection",
        "comment": "*****************************************************************************************************************\n*                                                                                                               *\n*  The next pan-os-php command (below) will set the Best Practice Zone Protection Profile to all zones\'.        *\n*  This config is sourced from the relevant snippet on https://github.com/PaloAltoNetworks/iron-skillet.        *\n*                                                                                                               *\n*****************************************************************************************************************"
    },
    {
        "type": "zone",
        "actions": "actions=logSetting-Set:default",
        "comment": "*****************************************************************************************************************\n*                                                                                                               *\n*  The next pan-os-php command (below) will set the Best Practice Log Foprwarding Profile to all zones\'.        *\n*  This config is sourced from the relevant snippet on https://github.com/PaloAltoNetworks/iron-skillet.        *\n*                                                                                                               *\n*****************************************************************************************************************"
    },
    {
        "type": "rule",
        "actions": "actions=logSetting-disable"
    },
    {
        "type": "rule",
        "actions": "actions=logsetting-set:default"
    },
    {
        "type": "rule",
        "actions": "actions=securityProfile-Group-Set:Alert-Only",
        "filter": "filter=!(secprof is.set) and (action is.allow)"
    },
    {
        "type": "rule",
        "actions": "actions=securityProfile-Profile-Set:vulnerability,Alert-Only-VP",
        "filter": "filter=(secprof type.is.profile) and !(secprof vuln-profile.is.set) and (action is.allow) and !(rule is.disabled)"
    },
    {
        "type": "rule",
        "actions": "actions=securityProfile-Profile-Set:spyware,Alert-Only-AS",
        "filter": "filter=(secprof type.is.profile) and !(secprof as-profile.is.set) and (action is.allow) and !(rule is.disabled)"
    },
    {
        "type": "rule",
        "actions": "actions=securityProfile-Profile-Set:virus,Alert-Only-AV",
        "filter": "filter=(secprof type.is.profile) and !(secprof av-profile.is.set) and (action is.allow) and !(rule is.disabled)"
    },
    {
        "type": "rule",
        "actions": "actions=securityProfile-Profile-Set:url-filtering,Alert-Only-URL",
        "filter": "filter=(secprof type.is.profile) and !(secprof url-profile.is.set) and (action is.allow) and !(rule is.disabled)"
    },
    {
        "type": "rule",
        "actions": "actions=securityProfile-Profile-Set:file-blocking,Alert-Only-FB",
        "filter": "filter=(secprof type.is.profile) and !(secprof file-profile.is.set) and (action is.allow) and !(rule is.disabled)"
    },
    {
        "type": "rule",
        "actions": "actions=securityProfile-Profile-Set:wildfire,Alert-Only-WF",
        "filter": "filter=(secprof type.is.profile) and !(secprof wf-profile.is.set) and (action is.allow) and !(rule is.disabled)"
    },
    {
        "type": "rule",
        "actions": "actions=securityProfile-Remove",
        "filter": "filter=(secprof is.set) and !(action is.allow)"
    },
    {
        "type": "rule",
        "actions": "actions=logstart-Disable"
    },
    {
        "type": "rule",
        "actions": "actions=logend-Enable"
    },
    {
        "type": "device",
        "actions": "actions=cleanuprule-create-bp:default"
    }
]
}';

###############################################################################
//playbook arguments
###############################################################################
        PH::processCliArgs();

        $PHP_FILE = __FILE__;

        if( isset(PH::$args['help']) )
        {
            $help_string = PH::boldText("USAGE: ") . "php " . $PHP_FILE . " in=inputfile.xml out=outputfile.xml [json=JSONfile]\n";

            PH::print_stdout( $help_string );

            exit();
        }


        if( isset(PH::$args['in']) )
            $input = PH::$args['in'];

//define out to save the final file into this file
        if( isset(PH::$args['out']) )
            $output = PH::$args['out'];

        if( isset(PH::$args['stagename']) )
            $stage_name = PH::$args['stagename'];

        if( isset(PH::$args['json']) )
        {
            $jsonFile = PH::$args['json'];
            $filedata = file_get_contents($jsonFile);
            $details = json_decode( $filedata, true );

            if( !isset(PH::$args['in']) )
                $input = $details['in'];

            if( !isset(PH::$args['out']) )
                $output = $details['out'];

            if( !isset(PH::$args['stagename']) )
                $stage_name = $details['stagename'];

            $command_array = $details['command'];
        }
        else
        {
            $details = json_decode($JSONarray, true);

            if( !isset(PH::$args['in']) )
                $input = $details['in'];

            if( !isset(PH::$args['out']) )
                $output = $details['out'];
            if( !isset(PH::$args['stagename']) )
                $stage_name = $details['stagename'];

            $command_array = $details['command'];
        }

###############################################################################
//EXECUTION
###############################################################################
        $out = "";
        $in = "";

        $in_exclude = array(
            'ironskillet-update',
            "maxmind-update",
            "util_get-action-filter"
        );

        $out_exclude = array(
            'stats',
            'download-predefined',
            'config-size',
            "xml-op-json",
            "bpa-generator",
            "ironskillet-update",
            "maxmind-update",
            "util_get-action-filter"
        );

        if( isset($details['header-comment']) && !empty($details['header-comment']) )
        {
            self::printCOMMENTS( $details['header-comment'] );
        }

        $out_counter = 0;
        foreach( $command_array as $key => $command )
        {
            $arguments = array();

            $script = $command['type'];
            unset( $command['type'] );
            $arg_string = "";

            if( isset( $command['comment'] ) )
            {
                $comment = $command['comment'];
                unset( $command['comment'] );
            }
            else
                $comment = "";

            foreach( $command as $arg )
                $arguments[] = $arg;

            ###############################################################################
            //IN / OUT specification
            ###############################################################################
            //what to do with playbook, stats, all script which do not need output

            if( $key == 0 )
            {
                $out_counter = 0;
                $in = $input;
                if( !in_array( $script, $out_exclude ) )
                {
                    $out = $stage_name.$out_counter.".xml";
                    $out_counter = $out_counter+10;
                }
                else
                    $out = $in;
            }
            elseif( $key > 0 )
            {
                if( !in_array( $script, $in_exclude ) )
                    $in = $out;

                if( !in_array( $script, $out_exclude ) )
                {
                    $out = $stage_name.$out_counter.".xml";
                    $out_counter = $out_counter+10;
                }
                else
                    $out = $in;
            }

            if( !in_array( $script, $in_exclude ) )
                $arguments[] = "in=".$in;

            if( !in_array( $script, $out_exclude ) )
                $arguments[] = "out=".$out;


            PH::resetCliArgs( $arguments);

            if( $comment !== null && !empty( $comment ) )
            {
                self::printCOMMENTS( $comment );
            }

            $tool = "pan-os-php type=".$script;
            PH::print_stdout("");
            PH::print_stdout( PH::boldText( "[ ".$tool. " ".implode( " ", PH::$argv )." ]" ) );
            PH::print_stdout("");
            $util = PH::callPANOSPHP( $script, PH::$argv, $argc, $PHP_FILE );

            PH::print_stdout("");
            PH::print_stdout( "############################################################################");
            PH::print_stdout("");
        }

        if( isset(PH::$args['out']) )
        {
            //now save the latest out= from the foreach loop "$out" into "$output" file;
            PH::print_stdout("FINAL script task: the processed PAN-OS configuration are copy to file: ".$output);
            PH::print_stdout("please use this file: ".$output." and upload it to your device");
            PH::print_stdout("");
            PH::print_stdout( "############################################################################");
            copy( $out, $output );
        }


        if( isset($details['footer-comment']) && !empty($details['footer-comment']) )
        {
            self::printCOMMENTS( $details['footer-comment'] );
        }
    }

    function endOfScript()
    {
    }

    function printCOMMENTS( $string )
    {
        PH::print_stdout("");

        $array = explode( "/n", $string );
        foreach( $array as $line )
            PH::print_stdout($line );

        PH::print_stdout("");
    }
}